pragma solidity ^0.8.0;

contract ECommerce {
    address owner;
    uint productCount = 0;

    struct Product {
        uint id;
        string name;
        string description;
        uint price;
        address payable seller;
        bool purchased;
    }

    mapping(uint => Product) public products;

    event ProductCreated(
        uint id,
        string name,
        string description,
        uint price,
        address payable seller,
        bool purchased
    );

    event ProductPurchased(
        uint id,
        string name,
        string description,
        uint price,
        address payable seller,
        bool purchased
    );

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function createProduct(string memory _name, string memory _description, uint _price) public {
        require(bytes(_name).length > 0);
        require(bytes(_description).length > 0);
        require(_price > 0);
        productCount++;
        products[productCount] = Product(productCount, _name, _description, _price, payable(msg.sender), false);
        emit ProductCreated(productCount, _name, _description, _price, payable(msg.sender), false);
    }

    function purchaseProduct(uint _id) public payable {
        Product memory _product = products[_id];
        address payable _seller = _product.seller;
        require(_product.id > 0 && _product.id <= productCount);
        require(msg.value >= _product.price);
        require(!_product.purchased);
        require(_seller != msg.sender);
        _product.seller.transfer(msg.value);
        _product.purchased = true;
        products[_id] = _product;
        emit ProductPurchased(productCount, _product.name, _product.description, _product.price, _seller, true);
    }
}
